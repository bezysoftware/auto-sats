@inject NavigationManager navigationManager

@if (Summary != null)
{
    var spendCurrency = Summary.SpendCurrency;
    <div class="ant-list-vertical">
        <ListItem Class="schedule-container" OnClick="ScheduleClick">
            <ListItemMeta>
                <AvatarTemplate>
                    <Avatar Src="@Summary.GetImgLogoPath()" Size="large" />
                </AvatarTemplate>
                <TitleTemplate>
                    <div class="schedule-title-container">
                        <span>
                            Buy <strong>@(Summary.Spend.ToString("N2")) @spendCurrency</strong> worth of <strong>BTC</strong> on <strong>@Summary.Exchange</strong> and @GetWithdrawalDescription(Summary.WithdrawalType).
                        </span>

                        <Tooltip Class="@GetScheduleIconClass(@Summary.IsPaused)"
                                 Title="@($"This schedule is {(Summary.IsPaused ? "paused" : "active")}")">
                            <Icon Type="@(Summary.IsPaused ? "pause" : "check")" Theme="outline" />
                        </Tooltip>
                    </div>
                </TitleTemplate>

                <DescriptionTemplate>
                    <div class="schedule-description-list">
                        <div class="description-container">
                            <span>Repeats</span>
                            <span>@Summary.CronDescription</span>
                        </div>
                        <div class="description-container">
                            <span>Next on</span>
                            <span>@GetNextOccurrence(Summary)</span>
                        </div>
                        <div class="description-container">
                            <span>Total spent</span>
                            <span>@Summary.TotalSpent.ToString("N2") @spendCurrency</span>
                        </div>
                        <div class="description-container">
                            <span>Total accumulated</span>
                            <span>@Summary.TotalAccumulated.ToString("N8") BTC</span>
                        </div>
                    </div>
                </DescriptionTemplate>
            </ListItemMeta>
        </ListItem>
    </div>
}

@code {
    [Parameter] public ExchangeScheduleSummary? Summary { get; set; }

    private void ScheduleClick()
    {
        navigationManager.NavigateTo($"/schedule/{Summary!.Id}");
    }

    private string GetScheduleIconClass(bool isPaused)
    {
        return $"schedule-title-icon {(isPaused ? "paused" : "active")}";
    }

    private string GetNextOccurrence(ExchangeScheduleSummary schedule)
    {
        return schedule.IsPaused ? "<Paused>" : schedule.NextOccurrence.ToString();
    }

    private string GetWithdrawalDescription(ExchangeWithdrawalType withdrawalType)
    {
        return withdrawalType switch
        {
            ExchangeWithdrawalType.Fixed => "withdraw to a fixed address",
            ExchangeWithdrawalType.Named => "withdraw to a named address",
            ExchangeWithdrawalType.Dynamic => "withdraw to a new address each time",
            _ => "do not withdraw"
        };
    }
} 