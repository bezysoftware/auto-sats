@inject NavigationManager navigation
@inject IExchangeScheduler scheduler
@inject IExchangeScheduleRunner runner
@inject MessageService message

<div>
    @if (ShowBackIcon)
    {
        <PageHeader Title="Schedule details" Ghost="true" BackIcon="true" />
    }
    else
    {
        <PageHeader Title="Schedule details" Ghost="true">
            <PageHeaderExtra>
                <Button Class="create-schedule-button" Type="link" OnClick="@(_ => navigation.NavigateTo("/schedule/new"))">Create another</Button>
            </PageHeaderExtra>
        </PageHeader>
    }
    <Card>
        @if (details != null)
        {
            <AntList TItem="ExchangeScheduleSummary" DataSource="new[] { details.Summary }">
                <ChildContent Context="item">
                    <ScheduleSummary Summary="item" />
                </ChildContent>
            </AntList>
            <Divider />
            <div class="summary-buttons">
                <Popconfirm Title="Are you sure you want to run this schedule now?"
                            OnConfirm="RunScheduleAsync"
                            OkText="Run"
                            CancelText="Cancel">
                    <Button Icon="play-circle" Loading="scheduleRunning">
                        Run now
                    </Button>
                </Popconfirm>
                @if (details.Summary.IsPaused)
                {
                    <Button Icon="caret-right" OnClick="ResumeScheduleAsync" Disabled="scheduleRunning">
                        Resume
                    </Button>
                }
                else
                {
                    <Button Icon="pause" OnClick="PauseScheduleAsync" Disabled="scheduleRunning">
                        Pause
                    </Button>
                }
                <Popconfirm Title="Are you sure you want to delete this schedule?"
                            OnConfirm="DeleteScheduleAsync"
                            OkText="Delete"
                            CancelText="Cancel">
                    <Button Type="primary" Danger Icon="delete" Disabled="scheduleRunning">
                        Delete
                    </Button>
                </Popconfirm>
            </div>
        }
        else
        {
            <Skeleton Active="true"></Skeleton>
        }
    </Card>

    <PageHeader Title="Timeline" Ghost="true" />
    <Card>
        @if (details != null)
        {
            <ScheduleTimeline Details="details" />
        }
        else
        {
            <Skeleton Active="true"></Skeleton>
        }
    </Card>
</div>

@code {
    [Parameter] public int ScheduleId { get; set; }
    [Parameter] public bool ShowBackIcon { get; set; }
    [Parameter] public EventCallback ScheduleDeleted { get; set; }

    private ExchangeScheduleDetails? details;
    private bool scheduleRunning;

    protected override async Task OnParametersSetAsync()
    {
        await RefreshDetailsAsync();
    }

    private async Task DeleteScheduleAsync()
    {
        await scheduler.DeleteScheduleAsync(ScheduleId);

        if (ShowBackIcon)
        {
            navigation.NavigateTo("/");
        }
        else
        {
            await ScheduleDeleted.InvokeAsync();
        }
    }

    private async Task RunScheduleAsync()
    {
        try
        {
            scheduleRunning = true;
            await runner.RunScheduleAsync(ScheduleId);
        }
        catch (Exception ex)
        {
            await message.Error($"Failed to run the schedule: {ex.Message}");
        }

        await RefreshDetailsAsync();
        scheduleRunning = false;
    }

    private async Task PauseScheduleAsync()
    {
        await scheduler.PauseScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task ResumeScheduleAsync()
    {
        await scheduler.ResumeScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task RefreshDetailsAsync()
    {
        this.details = await scheduler.GetScheduleDetailsAsync(ScheduleId);
    }
} 