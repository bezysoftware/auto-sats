@inject NavigationManager navigation
@inject IExchangeScheduler scheduler

<div>
    @if (ShowBackIcon)
    {
        <PageHeader Title="Schedule details" Ghost="true" BackIcon="true" />
    }
    else
    {
        <PageHeader Title="Schedule details" Ghost="true">
            <PageHeaderExtra>
                <Button Class="create-schedule-button" Type="link" OnClick="@(_ => navigation.NavigateTo("/schedule/new"))">Create another</Button>
            </PageHeaderExtra>
        </PageHeader>
    }
<Card>
    @if (details != null)
    {
        <AntList TItem="ExchangeScheduleSummary" DataSource="new[] { details.Summary }">
            <ChildContent Context="item">
                <ScheduleSummary Summary="item" />
            </ChildContent>
        </AntList>
        <Divider />
        <div class="summary-buttons">
            <Popconfirm Title="Are you sure you want to delete this schedule?"
                        OnConfirm="DeleteScheduleAsync"
                        OkText="Delete"
                        CancelText="Cancel">
                <Button Type="primary" Danger Icon="delete">
                    Delete
                </Button>
            </Popconfirm>
            @if (details.Summary.IsPaused)
            {
                <Button Icon="caret-right" OnClick="ResumeScheduleAsync">
                    Resume
                </Button>
            }
            else
            {
                <Button Icon="pause" OnClick="PauseScheduleAsync">
                    Pause
                </Button>
            }
        </div>
    }
    else
    {
        <Skeleton Active="true"></Skeleton>
    }
</Card>

    <PageHeader Title="Timeline" Ghost="true" />
    <Card>
        @if (details != null)
        {
        <Timeline Reverse="true" Mode="@TimelineMode.Left">
            <ChildContent>
                @foreach (var e in details.Events.OrderBy(x => x.Timestamp))
                {
                    <TimelineItem Color="@(e.Error == null ? "blue" : "red")" Label="@e.Timestamp.ToLocalTime().ToString()">
                        <ChildContent>@GetEventDescription(e)</ChildContent>
                        <Dot>
                            <Tooltip Title="e.Error">
                                <Icon Type="@GetEventIcon(e)" Theme="outline" />
                            </Tooltip>
                        </Dot>
                    </TimelineItem>
                }
            </ChildContent>
        </Timeline>
        }
        else
        {
            <Skeleton Active="true"></Skeleton>
        }
    </Card>
</div>

@code {
    [Parameter] public int ScheduleId { get; set; }
    [Parameter] public bool ShowBackIcon { get; set; }
    [Parameter] public EventCallback ScheduleDeleted { get; set; }

    private ExchangeScheduleDetails? details;

    protected override async Task OnParametersSetAsync()
    {
        await RefreshDetailsAsync();
    }

    private async Task DeleteScheduleAsync()
    {
        await scheduler.DeleteScheduleAsync(ScheduleId);

        if (ShowBackIcon)
        {
            navigation.NavigateTo("/");
        }
        else
        {
            await ScheduleDeleted.InvokeAsync();
        }
    }

    private async Task PauseScheduleAsync()
    {
        await scheduler.PauseScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task ResumeScheduleAsync()
    {
        await scheduler.ResumeScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task RefreshDetailsAsync()
    {
        this.details = await scheduler.GetScheduleDetailsAsync(ScheduleId);
    }

    private string GetEventDescription(ExchangeEvent e)
    {
        var spend = e.Schedule.SpendCurrency;
        var accumulate = "BTC";

        return e switch
        {
            ExchangeEventBuy buy when e.Error == null => $"Bought {buy.Received:N6} {accumulate} for {e.Schedule.Spend:N2} {spend}.",
            ExchangeEventBuy buy => $"Failed to buy {accumulate}.",
            ExchangeEventWithdrawal withdraw when e.Error == null => $"Withdrew {withdraw.Amount:N6} {accumulate} to {withdraw.Address}.",
            ExchangeEventWithdrawal withdraw => $"Failed to withdraw {accumulate} to {withdraw.Address}.",
            ExchangeEventCreate => "Schedule created.",
            ExchangeEventPause => "Schedule paused.",
            ExchangeEventResume => "Schedule resumed.",
            _ => string.Empty
        };
    }

    private string GetEventIcon(ExchangeEvent e)
    {
        return e.Type switch
        {
            ExchangeEventType.Pause => "pause",
            ExchangeEventType.Resume => "caret-right",
            ExchangeEventType.Buy => "bold",
            ExchangeEventType.Withdraw => "export",
            ExchangeEventType.Create => "plus",
            _ => string.Empty
        };
    }
} 