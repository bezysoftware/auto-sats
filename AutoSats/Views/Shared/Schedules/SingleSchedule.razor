@inject NavigationManager navigation
@inject IExchangeScheduler scheduler

<div>
    @if (ShowBackIcon)
    {
        <PageHeader Title="Schedule details" Ghost="true" BackIcon="true" />
    }
    else
    {
        <PageHeader Title="Schedule details" Ghost="true">
            <PageHeaderExtra>
                <Button Type="link" OnClick="@(_ => navigation.NavigateTo("/schedule/new"))">Create another</Button>
            </PageHeaderExtra>
        </PageHeader>
    }
<Card>
    @if (details != null)
    {
        <ScheduleSummary Summary="details.Summary" />
        <Divider />
        <div class="summary-buttons">
            <Popconfirm Title="Are you sure delete this schedule?"
                        OnConfirm="DeleteScheduleAsync"
                        OkText="Delete"
                        CancelText="Cancel">
                <Button Type="primary" Danger Icon="delete">
                    Delete
                </Button>
            </Popconfirm>
            @if (details.Summary.IsPaused)
            {
                <Button Icon="caret-right" OnClick="ResumeScheduleAsync">
                    Resume
                </Button>
            }
            else
            {
                <Button Icon="pause" OnClick="PauseScheduleAsync">
                    Pause
                </Button>
            }
        </div>
    }
</Card>

    <PageHeader Title="Timeline" Ghost="true" />
    <Card>
        <Timeline Mode="alternate">
            <TimelineItem>Create a services site 2015-09-01</TimelineItem>
            <TimelineItem Color="blue">Create a services site 2015-09-01</TimelineItem>
            <TimelineItem Color="red">Create a services site 2015-09-01</TimelineItem>
            <TimelineItem Color="green">Create a services site 2015-09-01</TimelineItem>
            @*@foreach (var e in details?.Events ?? Array.Empty<ExchangeEvent>())
                {
                    <TimelineItem>Create a services site 2015-09-01</TimelineItem>
                }*@
        </Timeline>
    </Card>
</div>

@code {
    [Parameter] public int ScheduleId { get; set; }
    [Parameter] public bool ShowBackIcon { get; set; }

    private ExchangeScheduleDetails? details;

    protected override async Task OnParametersSetAsync()
    {
        await RefreshDetailsAsync();
    }

    private async Task DeleteScheduleAsync()
    {
        await scheduler.DeleteScheduleAsync(ScheduleId);
        navigation.NavigateTo("/", true);
    }

    private async Task PauseScheduleAsync()
    {
        await scheduler.PauseScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task ResumeScheduleAsync()
    {
        await scheduler.ResumeScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task RefreshDetailsAsync()
    {
        this.details = await scheduler.GetScheduleDetailsAsync(ScheduleId);
    }
} 