@inject NavigationManager navigation
@inject IExchangeScheduler scheduler

<div>
    @if (ShowBackIcon)
    {
        <PageHeader Title="Schedule details" Ghost="true" BackIcon="true" />
    }
    else
    {
        <PageHeader Title="Schedule details" Ghost="true">
            <PageHeaderExtra>
                <Button Class="create-schedule-button" Type="link" OnClick="@(_ => navigation.NavigateTo("/schedule/new"))">Create another</Button>
            </PageHeaderExtra>
        </PageHeader>
    }
<Card>
    @if (details != null)
    {
        <ScheduleSummary Summary="details.Summary" />
        <Divider />
        <div class="summary-buttons">
            <Popconfirm Title="Are you sure delete this schedule?"
                        OnConfirm="DeleteScheduleAsync"
                        OkText="Delete"
                        CancelText="Cancel">
                <Button Type="primary" Danger Icon="delete">
                    Delete
                </Button>
            </Popconfirm>
            @if (details.Summary.IsPaused)
            {
                <Button Icon="caret-right" OnClick="ResumeScheduleAsync">
                    Resume
                </Button>
            }
            else
            {
                <Button Icon="pause" OnClick="PauseScheduleAsync">
                    Pause
                </Button>
            }
        </div>
    }
</Card>

    <PageHeader Title="Timeline" Ghost="true" />
    <Card>
        @if (details != null)
        {
        <Timeline Reverse="true" Mode="alternate">
            <ChildContent>
                @foreach (var e in details.Events.OrderBy(x => x.Timestamp))
                {
                    //todo: TimelineItem Label https://github.com/ant-design-blazor/ant-design-blazor/issues/1929
                    <TimelineItem Color="@(e.Error == null ? "blue" : "red")">
                        <ChildContent>@e.Timestamp.ToLocalTime() | @GetEventDescription(e)</ChildContent>
                        <Dot>
                            <Tooltip Title="e.Error">
                                <Icon Type="@GetEventIcon(e)" Theme="outline" />
                            </Tooltip>
                        </Dot>
                    </TimelineItem>
                }
            </ChildContent>
        </Timeline>
        }
    </Card>
</div>

@code {
    [Parameter] public int ScheduleId { get; set; }
    [Parameter] public bool ShowBackIcon { get; set; }

    private ExchangeScheduleDetails? details;

    protected override async Task OnParametersSetAsync()
    {
        await RefreshDetailsAsync();
    }

    private async Task DeleteScheduleAsync()
    {
        await scheduler.DeleteScheduleAsync(ScheduleId);
        navigation.NavigateTo("/", true);
    }

    private async Task PauseScheduleAsync()
    {
        await scheduler.PauseScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task ResumeScheduleAsync()
    {
        await scheduler.ResumeScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task RefreshDetailsAsync()
    {
        this.details = await scheduler.GetScheduleDetailsAsync(ScheduleId);
    }

    private string GetEventDescription(ExchangeEvent e)
    {
        var (crypto, fiat) = Currency.Parse(e.Schedule.CurrencyPair);

        return e switch
        {
            ExchangeEventBuy buy when e.Error == null => $"Bought {buy.Received} {crypto} for {e.Schedule.Spend} {fiat}.",
            ExchangeEventBuy buy => $"Failed to buy {crypto} for {e.Schedule.Spend} {fiat}.",
            ExchangeEventWithdrawal withdraw when e.Error == null => $"Withdrew {withdraw.Amount} {crypto} to {withdraw.Address}.",
            ExchangeEventWithdrawal withdraw => $"Failed to withdraw {crypto} to {withdraw.Address}.",
            ExchangeEventCreate => "Schedule created",
            ExchangeEventPause => "Schedule paused",
            ExchangeEventResume => "Schedule resumed",
            _ => string.Empty
        };
    }

    private string GetEventIcon(ExchangeEvent e)
    {
        return e.Type switch
        {
            ExchangeEventType.Pause => "pause",
            ExchangeEventType.Resume => "caret-right",
            ExchangeEventType.Buy => "dollar",
            ExchangeEventType.Withdraw => "export",
            ExchangeEventType.Create => "plus",
            _ => string.Empty
        };
    }
} 