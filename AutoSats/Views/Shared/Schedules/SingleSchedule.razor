@inject NavigationManager navigation
@inject IExchangeScheduler scheduler
@inject IExchangeScheduleRunner runner
@inject MessageService message
@inject INotificationService notifications
@inject IJSRuntime JSRuntime

<div>
    @if (ShowBackIcon)
    {
        <PageHeader Title="Schedule details" Ghost="true" BackIcon="true" />
    }
    else
    {
        <PageHeader Title="Schedule details" Ghost="true">
            <PageHeaderExtra>
                <Button Class="create-schedule-button" Type="link" OnClick="@(_ => navigation.NavigateTo("/schedule/new"))">Create another</Button>
            </PageHeaderExtra>
        </PageHeader>
    }
    <Card>
        @if (details != null)
        {
            <AntList TItem="ExchangeScheduleSummary" DataSource="new[] { details.Summary }">
                <ChildContent Context="item">
                    <ScheduleSummary Summary="item" />
                </ChildContent>
            </AntList>
            <Divider />
            <div class="summary-buttons">
                <Popconfirm Title="Are you sure you want to run this schedule now?"
                            OnConfirm="RunScheduleAsync"
                            OkText="Run"
                            CancelText="Cancel">
                    <Button Icon="play-circle" Loading="scheduleRunning">
                        Run now
                    </Button>
                </Popconfirm>
                @if (details.Summary.IsPaused)
                {
                    <Button Icon="caret-right" OnClick="ResumeScheduleAsync" Disabled="scheduleRunning">
                        Resume
                    </Button>
                }
                else
                {
                    <Button Icon="pause" OnClick="PauseScheduleAsync" Disabled="scheduleRunning">
                        Pause
                    </Button>
                }
                
                <a href="@GetExportPath()" target="_blank">
                    <Button Icon="download" Disabled="scheduleRunning">
                        Export as csv
                    </Button>
                </a>

                <EnumSelect
                    Class="notification-select"
                    @bind-Value="NotificationType"
                    TEnum="AutoSats.Data.NotificationType"
                    OnSelectedItemChanged="NotificationTypeChanged">
                    <PrefixIcon>
                        <Icon Type="@GetNotificationTypeIcon(NotificationType)" Theme="outline"/>
                    </PrefixIcon>
                    <LabelTemplate Context="_">
                        <span class="notification-label">Notifications @(NotificationType == Data.NotificationType.None ? "off" : "on")</span>
                    </LabelTemplate>
                </EnumSelect>

                <Popconfirm Title="Are you sure you want to delete this schedule?"
                            OnConfirm="DeleteScheduleAsync"
                            OkText="Delete"
                            CancelText="Cancel">
                    <Button Type="primary" Danger Icon="delete" Disabled="scheduleRunning">
                        Delete
                    </Button>
                </Popconfirm>
            </div>
        }
        else
        {
            <Skeleton Active="true"></Skeleton>
        }
    </Card>

    <PageHeader Title="Charts" Ghost="true" />
    <Card>
        @if (details != null)
        {
            <ScheduleCharts Details="details" />
        }
        else
        {
            <Skeleton Active="true"></Skeleton>
        }
    </Card>

    <PageHeader Title="Timeline" Ghost="true" />
    <Card>
        @if (details != null)
        {
            <ScheduleTimeline Details="details" />
        }
        else
        {
            <Skeleton Active="true"></Skeleton>
        }
    </Card>
</div>

@code {
    [Parameter] public int ScheduleId { get; set; }
    [Parameter] public bool ShowBackIcon { get; set; }
    [Parameter] public EventCallback ScheduleDeleted { get; set; }

    public Data.NotificationType NotificationType { get; set; }

    private ExchangeScheduleDetails? details;
    private bool scheduleRunning;
    private bool firstRun = true;

    protected override async Task OnParametersSetAsync()
    {
        await RefreshDetailsAsync();
    }

    private string GetExportPath()
    {
        return $"/api/export/{ScheduleId}";
    }

    private string GetNotificationTypeIcon(Data.NotificationType type)
    {
        return type switch
        {
            Data.NotificationType.All => "check",
            Data.NotificationType.Errors => "exclamation",
            _ => "close",
        };
    }

    private async Task DeleteScheduleAsync()
    {
        await scheduler.DeleteScheduleAsync(ScheduleId);

        if (ShowBackIcon)
        {
            navigation.NavigateTo("/");
        }
        else
        {
            await ScheduleDeleted.InvokeAsync();
        }
    }

    private async void NotificationTypeChanged(AutoSats.Data.NotificationType type)
    {
        if (this.firstRun) 
        {
            this.firstRun = false;
            return;
        }

        NotificationSubscription? subscription = null;

        if (type != Data.NotificationType.None)
        {

            var publicKey = this.notifications.GetServicePublicKey();
            var notifications = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/notifications.js");
            subscription = await notifications.InvokeAsync<NotificationSubscription>("requestSubscription", publicKey);

            if (subscription == null)
            {
                this.NotificationType = Data.NotificationType.None;
                StateHasChanged();
                await this.message.Error("Couldn't get notification subscription details (is your browser blocking push notifications?)");
                return;
            }
        }

        await this.scheduler.UpdateScheduleNotificationsAsync(ScheduleId, type, subscription);
        await this.message.Info("Notification preferences updated");
    }

    private async Task RunScheduleAsync()
    {
        try
        {
            scheduleRunning = true;
            await runner.RunScheduleAsync(ScheduleId);
        }
        catch (Exception ex)
        {
            await message.Error($"Failed to run the schedule: {ex.Message}");
        }

        await RefreshDetailsAsync();
        scheduleRunning = false;
    }

    private async Task PauseScheduleAsync()
    {
        await scheduler.PauseScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task ResumeScheduleAsync()
    {
        await scheduler.ResumeScheduleAsync(ScheduleId);
        await RefreshDetailsAsync();
    }

    private async Task RefreshDetailsAsync()
    {
        this.details = await scheduler.GetScheduleDetailsAsync(ScheduleId);
        this.NotificationType = this.details?.Summary.NotificationType ?? Data.NotificationType.None;
    }
} 