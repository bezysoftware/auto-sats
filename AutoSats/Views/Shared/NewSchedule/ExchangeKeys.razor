@inject ExchangeOptions[] exchanges
@inject IExchangeServiceFactory factory
@inject MessageService message

<div>
    <Form Model="keys" LabelColSpan="6" OnFinish="CheckBalanceAsync">
        <Row>
            <GridCol Span="12" Offset="6">
                <FormItem>
                    <Select DataSource="@exchanges"
                            @bind-Value="@context.Exchange"
                            TItem="ExchangeOptions"
                            TItemValue="ExchangeOptions"
                            Placeholder="Select an exchange"
                            Size="large"
                            OnSelectedItemChanged="@(_ => keys.Clear())">

                        <ItemTemplate Context="item">
                            <Avatar Src="@item.GetImgLogoPath()"
                                    Size="large" />
                            <span>@item.Name</span>
                        </ItemTemplate>

                        <LabelTemplate Context="item">
                            <div class="exchange-select-label">
                                <Avatar Src="@item.GetImgLogoPath()" />
                                <span>@item.Name</span>
                            </div>
                        </LabelTemplate>
                    </Select>
                </FormItem>
            </GridCol>
        </Row>
        @if (@context.Exchange != null)
        {
            <Row>
                <Text Class="exchange-description">
                    @context.Exchange.Name requires a combination of
                    @if (@context.Exchange.Key3Name != string.Empty)
                    {
                        <span><strong>@context.Exchange.Key1Name</strong>, <strong>@context.Exchange.Key2Name</strong> & <strong>@context.Exchange.Key3Name</strong>.</span>
                    }
                    else
                    {
                        <span><strong>@context.Exchange.Key1Name</strong> & <strong>@context.Exchange.Key2Name</strong>.</span>
                    }

                    Those values can be generated in <a href="@context.Exchange.ApiUrl" target="_blank">@context.Exchange.Name @context.Exchange.ApiName</a>. @context.Exchange.Hint

                    @if (@context.Exchange.Permissions.Any())
                    {
                        <span>
                            Make sure you allow following permissions:
                            <strong>@context.Exchange.Permissions[0]</strong>
                            @foreach (var permission in context.Exchange.Permissions.Skip(1))
                            {
                                <span>, </span><strong>@permission</strong>
                            }

                            and also enable <strong>BTC withdrawal</strong> if you want to be able to automatically withdraw to your wallet (you can configure this in the last step).
                        </span>
                    }
                </Text>
            </Row>
            <Row>
                <GridCol Span="12">
                    <FormItem Label="@context.Exchange.Key1Name">
                        <Input @bind-Value="keys.Key1"
                               TValue="string" />
                    </FormItem>

                    <FormItem Label="@context.Exchange.Key2Name">
                        <Input @bind-Value="keys.Key2"
                               TValue="string" />
                    </FormItem>

                    @if (@context.Exchange.Key3Name != string.Empty)
                    {
                        <FormItem Label="@context.Exchange.Key3Name">
                            <Input @bind-Value="keys.Key3"
                                   TValue="string" />
                        </FormItem>
                    }
                </GridCol>
                <GridCol Offset="1" Span="11">
                    <Image Src="@context.Exchange.GetImgConfigPath()" />
                </GridCol>
            </Row>

            <FormItem WrapperColOffset="9" WrapperColSpan="6">
                <Button Loading="@isLoadingBalance" Block HtmlType="submit">
                    @(isLoadingBalance ? "Checking connection" : "Check connection")
                </Button>
            </FormItem>

            <AntDesign.Text Type="secondary" Class="check-balance-description">
                This will attempt to retrieve your current balance, no order will be placed.
            </AntDesign.Text>

        }
    </Form>
</div>

@code {
    [Parameter] public EventCallback<ViewModels.ExchangeKeys> KeysChanged { get; set; }

    private ViewModels.ExchangeKeys keys = new ViewModels.ExchangeKeys();
    private bool isLoadingBalance;

    private async Task CheckBalanceAsync()
    {
        this.isLoadingBalance = true;

        try
        {
            await factory.GetService(keys.Exchange!.Name!, keys.Key1!, keys.Key2!, keys.Key3).GetBalancesAsync();
            await KeysChanged.InvokeAsync(keys);
        }
        catch(Exception ex)
        {
            await message.Error($"Couldn't verify supplied credentials: {ex.Message}");
        }

        this.isLoadingBalance = false;
    }
}